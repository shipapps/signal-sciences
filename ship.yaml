assets:
  v1:
    - github:
        dest: ./base
        repo: shipapps/signal-sciences
        path: manifests/
        proxy: false
        strip_path: true
    - inline:
        dest: ./base/secret.yaml
        when: '{{repl ConfigOptionEquals "secret_type" "unencrypted_secrets"}}'
        contents: |
          apiVersion: v1
          kind: Secret
          metadata:
            name: signalsciences
            labels:
              app: signalsciences
          type: Opaque
          data:
            secretAccessKey: '{{repl ConfigOption "access_key_id" | Base64Encode }}'
            accessKeyId: '{{repl ConfigOption "secret_access_key" | Base64Encode }}'

    - inline:
        dest: ./base/sealedsecret.yaml
        when: '{{repl ConfigOptionEquals "secret_type" "sealed_secrets"}}'
        contents: |
          ---
          apiVersion: v1
          apiVersion: bitnami.com/v1alpha1
          kind: SealedSecret
          metadata:
            name: signalsciences
            namespace: default
          spec:
            encryptedData:
              accessKeyId: '{{repl KubeSeal (ConfigOption "sealed_secret_cert") (ConfigOption "namespace") "signalsciences" (ConfigOption "access_key_id") }}'
              secretAccessKey: '{{repl KubeSeal (ConfigOption "sealed_secret_cert") (ConfigOption "namespace") "signalsciences" (ConfigOption "secret_access_key") }}'

config:
  v1:
    - name: secrets
      title: Secret Management
      items:
        - name: secret_type
          title: How would you like to manage your SignalSciences credentials?
          type: select_one
          default: unencrypted_secrets
          items:
            - name: sealed_secrets
              title: Provision as SealedSecrets
            - name: unencrypted_secrets
              title: Provision as Standard, Unencrypted Secrets
            - name: no_secrets
              title: Don't Provision Any Secrets
        - name: sealed_secret_cert
          title: SealedSecret Cert
          type: textarea
          required: true
          when: '{{repl ConfigOptionEquals "secret_type" "sealed_secrets"}}'
    - name: credentials
      title: SignalSciences Credentials
      items:
        - name: access_key_id
          title: AccessKeyId
          type: text
          required: true
          when: '{{repl ConfigOptionNotEquals "secret_type" "no_secrets"}}'
        - name: secret_access_key
          title: SecretAccessKey
          type: text
          required: true
          when: '{{repl ConfigOptionNotEquals "secret_type" "no_secrets"}}'

lifecycle:
  v1:
    - message:
        contents: |
          <img src="https://dashboard.signalsciences.net/static/images/logo-icon-color.svg" alt="SignalSciences Agent" width="200"/>

          # SignalSciences Agent

          **This Ship App will help you prepare a GitOps-friendly, production grade version of the SignalSciences agent to a Kubernetes cluster.**

          At the end of this setup, you'll have a deployable Kubernetes YAML that can be commited to a GitOps repo or deployed using existing tools. If you don't already have an automated
          way to deploy to your Kubernetes cluster, we recommend using [Weave Flux](https://github.com/weaveworks/flux). There is also a [Weave Flux Ship App](https://github.com/shipapps/flux)
          available to help provision and manage Flux.

          Before continuing, be sure to have your SignalSciences AccessKeyId and SecretAccessKey.

    - config:
        invalidates: ["render"]

    - message:
        id: secret-warning
        requires: ["config"]
        contents: |
          {{repl if ConfigOptionEquals "secret_type" "no_secrets"}}
            # <img src="https://www.materialui.co/materialIcons/alert/warning_amber_36x36.png" /> Warning

            You've selected to skip deploying your SignalSciences AccessKeyId and SecretAccessKey to the cluster with this deployment.

            These values are required at runtime. By default, the DaemonSet will expect these to exist in a single secret named `signalsciences`. Below is a simple template that
            you can use to manually provision your SignalSciences credentials to your cluster.

            ```yaml
            apiVersion: v1
            kind: Secret
            metadata:
              name: signalsciences
              labels:
                app: signalsciences
            type: Opaque
            data:
              secretAccessKey: "base64 encoded value"
              accessKeyId: "base64 encoded value"
            ```
          {{repl else if ConfigOptionEquals "secret_type" "sealed_secrets"}}
            # <img src="https://www.materialui.co/materialIcons/alert/warning_amber_36x36.png" /> Warning

            Your SignalSciences AccessKeyId and SecretAccessKey will be encrypted using the cert you've provided. The SealedSecret controller running in your target cluster
            must be able to decrypt these for the Agent to start properly.

            If you have trouble getting the Agnet to start, a good step to debugging this is to check the logs of the Sealed Secret controller (probably running in the kube-system namespace).
          {{repl else if ConfigOptionEquals "secret_type" "unencrypted_secrets"}}
            # <img src="https://www.materialui.co/materialIcons/alert/warning_amber_36x36.png" /> Warning

            Your SignalSciences AccessKeyId and SecretAccessKey will be available as plain text in the YAML file that Ship generates. This should be considered sensitive and treated with care.

            If you are planning to use a GitOps workflow to deploy and keep the SignalSciences Agent updated, it's strongly recommended that you either use
            the [Bitnami SealedSecrets Controller](https://github.com/bitnami-labs/sealed-secrets) or provision and manage these secrets out-of-band by
            pushing them manually to a secret management tool.
          {{repl end}}

          **Click the Confirm button to continue, or else click Back to change your selection.**

    - render:
        requires: ["config"]
        root: .

    - kustomizeIntro: {}

    - kustomize:
        requires: ["render"]
        base: base
        overlay: overlays/ship
        dest: signalsciences.yaml

    - message:
        id: outro
        contents: >-
          ## Deploy

          The SignalSciences Agent is ready to be deployed. To deploy it now, you can run:

            kubectl apply -f signalsciences.yaml

          ## Updates

          Ship can now watch for any changes made to the SignalSciences Agent, and can download them, apply your patches, and create an updated version of the rendered.yaml. To watch for updates:

            ship watch && ship update

          Running this command in the current directory will automate the process of downloading and preparing updates.

          For continuous notification and preparation of application updates via email, webhook or automated pull request, create a free account at https://www.replicated.com/ship.
